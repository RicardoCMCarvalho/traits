from .constants import ComparisonMode as ComparisonMode, DefaultValue as DefaultValue
from .trait_base import SequenceTypes as SequenceTypes
from .trait_errors import TraitError as TraitError
from .trait_type import TraitType as TraitType
from .trait_types import Any as Any, Str as Str
from typing import Optional

ndarray: Any
asarray: Any

def dtype2trait(dtype: Any): ...

class AbstractArray(TraitType):
    dtype: Any = ...
    shape: Any = ...
    coerce: Any = ...
    def __init__(self, dtype: Optional[Any] = ..., shape: Optional[Any] = ..., value: Optional[Any] = ..., coerce: bool = ..., typecode: Optional[Any] = ..., **metadata: Any) -> None: ...
    def validate(self, object: Any, name: Any, value: Any): ...
    def info(self): ...
    def create_editor(self): ...
    def get_default_value(self): ...
    def copy_default_value(self, value: Any): ...

class Array(AbstractArray):
    def __init__(self, dtype: Optional[Any] = ..., shape: Optional[Any] = ..., value: Optional[Any] = ..., typecode: Optional[Any] = ..., **metadata: Any) -> None: ...

class CArray(AbstractArray):
    def __init__(self, dtype: Optional[Any] = ..., shape: Optional[Any] = ..., value: Optional[Any] = ..., typecode: Optional[Any] = ..., **metadata: Any) -> None: ...

class ArrayOrNone(CArray):
    def __init__(self, *args: Any, **metadata: Any) -> None: ...
    def validate(self, object: Any, name: Any, value: Any): ...
    def get_default_value(self): ...
