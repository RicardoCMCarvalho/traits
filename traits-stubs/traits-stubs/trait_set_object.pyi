from .trait_errors import TraitError as TraitError
from typing import Any, Optional

class TraitSetEvent:
    removed: Any = ...
    added: Any = ...
    def __init__(self, removed: Optional[Any] = ..., added: Optional[Any] = ...) -> None: ...

class TraitSetObject(set):
    trait: Any = ...
    object: Any = ...
    name: Any = ...
    name_items: Any = ...
    def __init__(self, trait: Any, object: Any, name: Any, value: Any) -> None: ...
    def __deepcopy__(self, memo: Any): ...
    def update(self, value: Any): ...
    def intersection_update(self, value: Any) -> None: ...
    def difference_update(self, value: Any) -> None: ...
    def symmetric_difference_update(self, value: Any): ...
    def add(self, value: Any): ...
    def remove(self, value: Any) -> None: ...
    def discard(self, value: Any) -> None: ...
    def pop(self): ...
    def clear(self) -> None: ...
    def __reduce_ex__(self, protocol: Optional[Any] = ...): ...
    def __ior__(self, value: Any): ...
    def __iand__(self, value: Any): ...
    def __ixor__(self, value: Any): ...
    def __isub__(self, value: Any): ...
