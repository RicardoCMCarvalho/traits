from .constants import DefaultValue as DefaultValue, ValidateTrait as ValidateTrait
from .trait_base import CoercableTypes as CoercableTypes, RangeTypes as RangeTypes, SequenceTypes as SequenceTypes, TypeTypes as TypeTypes, class_of as class_of
from .trait_converters import trait_from as trait_from
from .trait_dict_object import TraitDictEvent as TraitDictEvent, TraitDictObject as TraitDictObject
from .trait_errors import TraitError as TraitError
from .trait_handler import TraitHandler as TraitHandler
from .trait_list_object import TraitListEvent as TraitListEvent, TraitListObject as TraitListObject
from .util.deprecated import deprecated as deprecated
from typing import Any, Optional

logger: Any
CallableTypes: Any

class TraitCoerceType(TraitHandler):
    aType: Any = ...
    fast_validate: Any = ...
    def __init__(self, aType: Any) -> None: ...
    def validate(self, object: Any, name: Any, value: Any): ...
    def info(self): ...
    editor: Any = ...
    def get_editor(self, trait: Any): ...

class TraitCastType(TraitCoerceType):
    aType: Any = ...
    fast_validate: Any = ...
    def __init__(self, aType: Any) -> None: ...
    def validate(self, object: Any, name: Any, value: Any): ...

class TraitInstance(TraitHandler):
    module: Any = ...
    aClass: Any = ...
    def __init__(self, aClass: Any, allow_none: bool = ..., module: str = ...) -> None: ...
    def allow_none(self) -> None: ...
    fast_validate: Any = ...
    def set_fast_validate(self) -> None: ...
    def validate(self, object: Any, name: Any, value: Any): ...
    def info(self): ...
    def resolve_class(self, object: Any, name: Any, value: Any) -> None: ...
    def find_class(self, klass: Any): ...
    def validate_class(self, aClass: Any): ...
    def create_default_value(self, *args: Any, **kw: Any): ...
    editor: Any = ...
    def get_editor(self, trait: Any): ...

class TraitFunction(TraitHandler):
    aFunc: Any = ...
    fast_validate: Any = ...
    def __init__(self, aFunc: Any) -> None: ...
    def validate(self, object: Any, name: Any, value: Any): ...
    def info(self): ...

class TraitEnum(TraitHandler):
    values: Any = ...
    fast_validate: Any = ...
    def __init__(self, *values: Any) -> None: ...
    def validate(self, object: Any, name: Any, value: Any): ...
    def info(self): ...
    def get_editor(self, trait: Any): ...

class TraitPrefixList(TraitHandler):
    values: Any = ...
    values_: Any = ...
    fast_validate: Any = ...
    def __init__(self, *values: Any) -> None: ...
    def validate(self, object: Any, name: Any, value: Any): ...
    def info(self): ...
    def get_editor(self, trait: Any): ...

class TraitMap(TraitHandler):
    is_mapped: bool = ...
    map: Any = ...
    fast_validate: Any = ...
    def __init__(self, map: Any) -> None: ...
    def validate(self, object: Any, name: Any, value: Any): ...
    def mapped_value(self, value: Any): ...
    def post_setattr(self, object: Any, name: Any, value: Any) -> None: ...
    def info(self): ...
    def get_editor(self, trait: Any): ...

class TraitPrefixMap(TraitMap):
    map: Any = ...
    fast_validate: Any = ...
    def __init__(self, map: Any) -> None: ...
    def validate(self, object: Any, name: Any, value: Any): ...
    def info(self): ...

class TraitCompound(TraitHandler):
    handlers: Any = ...
    def __init__(self, *handlers: Any) -> None: ...
    is_mapped: bool = ...
    has_items: bool = ...
    reversable: bool = ...
    validates: Any = ...
    slow_validates: Any = ...
    mapped_handlers: Any = ...
    fast_validate: Any = ...
    post_setattrs: Any = ...
    post_setattr: Any = ...
    def set_validate(self) -> None: ...
    def validate(self, object: Any, name: Any, value: Any): ...
    def slow_validate(self, object: Any, name: Any, value: Any): ...
    def full_info(self, object: Any, name: Any, value: Any): ...
    def info(self): ...
    def mapped_value(self, value: Any): ...
    def get_editor(self, trait: Any): ...
    def items_event(self): ...

class TraitTuple(TraitHandler):
    types: Any = ...
    fast_validate: Any = ...
    def __init__(self, *args: Any) -> None: ...
    def validate(self, object: Any, name: Any, value: Any): ...
    def full_info(self, object: Any, name: Any, value: Any): ...
    def get_editor(self, trait: Any): ...

class TraitList(TraitHandler):
    info_trait: Any = ...
    default_value_type: Any = ...
    item_trait: Any = ...
    minlen: Any = ...
    maxlen: Any = ...
    has_items: Any = ...
    def __init__(self, trait: Optional[Any] = ..., minlen: int = ..., maxlen: Any = ..., has_items: bool = ...) -> None: ...
    def clone(self): ...
    def validate(self, object: Any, name: Any, value: Any): ...
    def full_info(self, object: Any, name: Any, value: Any): ...
    def get_editor(self, trait: Any): ...
    def items_event(self): ...

def items_event(): ...

class TraitDict(TraitHandler):
    info_trait: Any = ...
    default_value_type: Any = ...
    key_trait: Any = ...
    value_trait: Any = ...
    has_items: Any = ...
    value_handler: Any = ...
    def __init__(self, key_trait: Optional[Any] = ..., value_trait: Optional[Any] = ..., has_items: bool = ...) -> None: ...
    def clone(self): ...
    def validate(self, object: Any, name: Any, value: Any): ...
    def full_info(self, object: Any, name: Any, value: Any): ...
    editor: Any = ...
    def get_editor(self, trait: Any): ...
    def items_event(self): ...
