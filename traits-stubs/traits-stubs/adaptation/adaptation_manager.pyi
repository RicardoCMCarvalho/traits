from traits.adaptation.adaptation_error import AdaptationError as AdaptationError
from traits.has_traits import HasTraits as HasTraits
from traits.trait_types import Dict as Dict, List as List, Str as Str
from typing import Any

def no_adapter_necessary(adaptee: Any): ...

class AdaptationManager(HasTraits):
    @staticmethod
    def mro_distance_to_protocol(from_type: Any, to_protocol: Any): ...
    @staticmethod
    def provides_protocol(type_: Any, protocol: Any): ...
    def adapt(self, adaptee: Any, to_protocol: Any, default: Any = ...): ...
    def register_offer(self, offer: Any) -> None: ...
    def register_factory(self, factory: Any, from_protocol: Any, to_protocol: Any) -> None: ...
    def register_provides(self, provider_protocol: Any, protocol: Any) -> None: ...
    def supports_protocol(self, obj: Any, protocol: Any): ...

adaptation_manager: Any

def set_global_adaptation_manager(new_adaptation_manager: Any) -> None: ...
def reset_global_adaptation_manager() -> None: ...
def get_global_adaptation_manager(): ...
def adapt(adaptee: Any, to_protocol: Any, default: Any = ...): ...
def register_factory(factory: Any, from_protocol: Any, to_protocol: Any): ...
def register_offer(offer: Any): ...
def register_provides(provider_protocol: Any, protocol: Any): ...
def supports_protocol(obj: Any, protocol: Any): ...
def provides_protocol(type_: Any, protocol: Any): ...
