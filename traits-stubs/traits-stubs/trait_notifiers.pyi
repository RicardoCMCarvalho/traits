from .trait_base import Uninitialized as Uninitialized
from .trait_errors import TraitNotificationError as TraitNotificationError
from typing import Any, Optional

ui_thread: int
ui_handler: Any

def set_ui_handler(handler: Any) -> None: ...
def ui_dispatch(handler: Any, *args: Any, **kw: Any) -> None: ...

class NotificationExceptionHandlerState:
    handler: Any = ...
    reraise_exceptions: Any = ...
    locked: Any = ...
    def __init__(self, handler: Any, reraise_exceptions: Any, locked: Any) -> None: ...

class NotificationExceptionHandler:
    traits_logger: Any = ...
    main_thread: Any = ...
    thread_local: Any = ...
    def __init__(self) -> None: ...

notification_exception_handler: Any
push_exception_handler: Any
pop_exception_handler: Any
handle_exception: Any

def set_change_event_tracers(pre_tracer: Optional[Any] = ..., post_tracer: Optional[Any] = ...) -> None: ...
def get_change_event_tracers(): ...
def clear_change_event_tracers() -> None: ...
def change_event_tracers(pre_tracer: Any, post_tracer: Any) -> None: ...

class AbstractStaticChangeNotifyWrapper:
    arguments_transforms: Any = ...
    argument_transform: Any = ...
    handler: Any = ...
    def __init__(self, handler: Any) -> None: ...
    def __call__(self, object: Any, trait_name: Any, old: Any, new: Any) -> None: ...
    def equals(self, handler: Any): ...

class StaticAnyTraitChangeNotifyWrapper(AbstractStaticChangeNotifyWrapper):
    argument_transforms: Any = ...

class StaticTraitChangeNotifyWrapper(AbstractStaticChangeNotifyWrapper):
    argument_transforms: Any = ...

class TraitChangeNotifyWrapper:
    argument_transforms: Any = ...
    def __init__(self, handler: Any, owner: Any, target: Optional[Any] = ...) -> None: ...
    object: Any = ...
    name: Any = ...
    owner: Any = ...
    notify_listener: Any = ...
    argument_transform: Any = ...
    handler: Any = ...
    def init(self, handler: Any, owner: Any, target: Optional[Any] = ...): ...
    def __call__(self, object: Any, trait_name: Any, old: Any, new: Any) -> None: ...
    def dispatch(self, handler: Any, *args: Any) -> None: ...
    def equals(self, handler: Any): ...
    def listener_deleted(self, ref: Any) -> None: ...
    def dispose(self) -> None: ...

class ExtendedTraitChangeNotifyWrapper(TraitChangeNotifyWrapper): ...

class FastUITraitChangeNotifyWrapper(TraitChangeNotifyWrapper):
    def dispatch(self, handler: Any, *args: Any) -> None: ...

class NewTraitChangeNotifyWrapper(TraitChangeNotifyWrapper):
    def dispatch(self, handler: Any, *args: Any) -> None: ...
