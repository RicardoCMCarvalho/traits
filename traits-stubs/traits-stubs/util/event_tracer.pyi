from traits import trait_notifiers as trait_notifiers
from typing import Any, Optional

CHANGEMSG: str
CALLINGMSG: str
EXITMSG: str
SPACES_TO_ALIGN_WITH_CHANGE_MESSAGE: int

class SentinelRecord: ...

class ChangeMessageRecord:
    time: Any = ...
    indent: Any = ...
    name: Any = ...
    old: Any = ...
    new: Any = ...
    class_name: Any = ...
    def __init__(self, time: Any, indent: Any, name: Any, old: Any, new: Any, class_name: Any) -> None: ...

class CallingMessageRecord:
    time: Any = ...
    indent: Any = ...
    handler: Any = ...
    source: Any = ...
    def __init__(self, time: Any, indent: Any, handler: Any, source: Any) -> None: ...

class ExitMessageRecord:
    time: Any = ...
    indent: Any = ...
    handler: Any = ...
    exception: Any = ...
    def __init__(self, time: Any, indent: Any, handler: Any, exception: Any) -> None: ...

class RecordContainer:
    def __init__(self) -> None: ...
    def record(self, record: Any) -> None: ...
    def save_to_file(self, filename: Any) -> None: ...

class MultiThreadRecordContainer:
    def __init__(self) -> None: ...
    def get_change_event_collector(self, thread_name: Any): ...
    def save_to_directory(self, directory_name: Any) -> None: ...

class ChangeEventRecorder:
    indent: int = ...
    container: Any = ...
    def __init__(self, container: Any) -> None: ...
    def pre_tracer(self, obj: Any, name: Any, old: Any, new: Any, handler: Any) -> None: ...
    def post_tracer(self, obj: Any, name: Any, old: Any, new: Any, handler: Any, exception: Optional[Any] = ...) -> None: ...

class MultiThreadChangeEventRecorder:
    tracers: Any = ...
    container: Any = ...
    def __init__(self, container: Any) -> None: ...
    def close(self) -> None: ...
    def pre_tracer(self, obj: Any, name: Any, old: Any, new: Any, handler: Any) -> None: ...
    def post_tracer(self, obj: Any, name: Any, old: Any, new: Any, handler: Any, exception: Optional[Any] = ...) -> None: ...

def record_events() -> None: ...
