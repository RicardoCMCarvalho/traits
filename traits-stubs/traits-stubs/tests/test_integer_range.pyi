import unittest
from traits.api import BaseRange as BaseRange, Either as Either, HasTraits as HasTraits, Instance as Instance, Range as Range, TraitError as TraitError
from traits.testing.optional_dependencies import numpy as numpy, requires_numpy as requires_numpy
from typing import Any

def ModelFactory(name: Any, RangeFactory: Any): ...

class Impossible:
    def __init__(self) -> None: ...

impossible: Any

def RangeCompound(*args: Any, **kwargs: Any): ...
def BaseRangeCompound(*args: Any, **kwargs: Any): ...

ModelWithRange: Any
ModelWithBaseRange: Any
ModelWithRangeCompound: Any
ModelWithBaseRangeCompound: Any

class InheritsFromInt(int): ...

class IntLike:
    def __init__(self, value: Any) -> None: ...
    def __index__(self): ...

class BadIntLike:
    def __index__(self) -> None: ...

class CommonRangeTests:
    def test_accepts_int(self) -> None: ...
    def test_accepts_bool(self) -> None: ...
    def test_rejects_bad_types(self) -> None: ...
    def test_accepts_numpy_types(self) -> None: ...
    def test_rejects_numpy_types(self) -> None: ...
    def test_accepts_int_subclass(self) -> None: ...
    def test_accepts_int_like(self) -> None: ...
    def test_bad_int_like(self) -> None: ...
    def test_endpoints(self) -> None: ...
    def test_half_infinite(self) -> None: ...

class TestIntRange(CommonRangeTests, unittest.TestCase):
    model: Any = ...
    def setUp(self) -> None: ...

class TestIntBaseRange(CommonRangeTests, unittest.TestCase):
    model: Any = ...
    def setUp(self) -> None: ...

class TestIntRangeCompound(CommonRangeTests, unittest.TestCase):
    model: Any = ...
    def setUp(self) -> None: ...

class TestIntBaseRangeCompound(CommonRangeTests, unittest.TestCase):
    model: Any = ...
    def setUp(self) -> None: ...
