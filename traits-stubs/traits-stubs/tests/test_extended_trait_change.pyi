import unittest
from traits.api import Any as Any, Dict as Dict, HasTraits as HasTraits, Instance as Instance, Int as Int, List as List, Property as Property, TraitDictEvent as TraitDictEvent, TraitDictObject as TraitDictObject, TraitError as TraitError, TraitListEvent as TraitListEvent, TraitListObject as TraitListObject, Undefined as Undefined, cached_property as cached_property, on_trait_change as on_trait_change, pop_exception_handler as pop_exception_handler, push_exception_handler as push_exception_handler

class ArgCheckBase(HasTraits):
    value: Any = ...
    int1: Any = ...
    int2: Any = ...
    int3: Any = ...
    tint1: Any = ...
    tint2: Any = ...
    tint3: Any = ...
    calls: Any = ...
    tc: Any = ...

class ArgCheckList(ArgCheckBase):
    value: Any = ...

class ArgCheckDict(ArgCheckBase):
    value: Any = ...

class ArgCheckSimple(ArgCheckBase):
    def arg_check0(self) -> None: ...
    def arg_check1(self, new: Any) -> None: ...
    def arg_check2(self, name: Any, new: Any) -> None: ...
    def arg_check3(self, object: Any, name: Any, new: Any) -> None: ...
    def arg_check4(self, object: Any, name: Any, old: Any, new: Any) -> None: ...

class ArgCheckDecorator(ArgCheckBase):
    def arg_check0(self) -> None: ...
    def arg_check1(self, new: Any) -> None: ...
    def arg_check2(self, name: Any, new: Any) -> None: ...
    def arg_check3(self, object: Any, name: Any, new: Any) -> None: ...
    def arg_check4(self, object: Any, name: Any, old: Any, new: Any) -> None: ...

class BaseInstance(HasTraits):
    ref: Any = ...
    calls: Any = ...
    exp_object: Any = ...
    exp_name: Any = ...
    dst_name: Any = ...
    exp_old: Any = ...
    exp_new: Any = ...
    dst_new: Any = ...
    tc: Any = ...

class InstanceValueListener(BaseInstance):
    def arg_check0(self) -> None: ...
    def arg_check1(self, new: Any) -> None: ...
    def arg_check2(self, name: Any, new: Any) -> None: ...
    def arg_check3(self, object: Any, name: Any, new: Any) -> None: ...
    def arg_check4(self, object: Any, name: Any, old: Any, new: Any) -> None: ...

class InstanceSimpleValue(InstanceValueListener):
    ref: Any = ...

class InstanceListValue(InstanceValueListener):
    ref: Any = ...

class InstanceDictValue(InstanceValueListener):
    ref: Any = ...

class InstanceValueListListener(BaseInstance):
    ref: Any = ...
    def arg_check0(self) -> None: ...
    def arg_check1(self, new: Any) -> None: ...
    def arg_check2(self, name: Any, new: Any) -> None: ...
    def arg_check3(self, object: Any, name: Any, new: Any) -> None: ...
    def arg_check4(self, object: Any, name: Any, old: Any, new: Any) -> None: ...

class List1(HasTraits):
    refs: Any = ...
    calls: Any = ...
    exp_object: Any = ...
    exp_name: Any = ...
    type_old: Any = ...
    exp_old: Any = ...
    type_new: Any = ...
    exp_new: Any = ...
    tc: Any = ...
    def arg_check0(self) -> None: ...
    def arg_check3(self, object: Any, name: Any, new: Any) -> None: ...
    def arg_check4(self, object: Any, name: Any, old: Any, new: Any) -> None: ...

class List2(HasTraits):
    refs: Any = ...
    calls: Any = ...
    exp_new: Any = ...
    tc: Any = ...
    def arg_check1(self, new: Any) -> None: ...

class List3(HasTraits):
    refs: Any = ...
    calls: Any = ...
    exp_name: Any = ...
    exp_new: Any = ...
    tc: Any = ...
    def arg_check2(self, name: Any, new: Any) -> None: ...

class Dict1(List1):
    refs: Any = ...

class Dict2(HasTraits):
    refs: Any = ...
    calls: Any = ...
    exp_new: Any = ...
    tc: Any = ...
    def arg_check1(self, new: Any) -> None: ...

class Dict3(HasTraits):
    refs: Any = ...
    calls: Any = ...
    exp_name: Any = ...
    exp_new: Any = ...
    tc: Any = ...
    def arg_check2(self, name: Any, new: Any) -> None: ...

class Complex(HasTraits):
    int1: Any = ...
    int2: Any = ...
    int3: Any = ...
    tint1: Any = ...
    tint2: Any = ...
    tint3: Any = ...
    ref: Any = ...
    calls: Any = ...
    exp_object: Any = ...
    exp_name: Any = ...
    dst_name: Any = ...
    exp_old: Any = ...
    exp_new: Any = ...
    dst_new: Any = ...
    tc: Any = ...
    def arg_check0(self) -> None: ...
    def arg_check1(self, new: Any) -> None: ...
    def arg_check2(self, name: Any, new: Any) -> None: ...
    def arg_check3(self, object: Any, name: Any, new: Any) -> None: ...
    def arg_check4(self, object: Any, name: Any, old: Any, new: Any) -> None: ...

class Link(HasTraits):
    next: Any = ...
    prev: Any = ...
    value: Any = ...

class LinkTest(HasTraits):
    head: Any = ...
    calls: Any = ...
    exp_object: Any = ...
    exp_name: Any = ...
    dst_name: Any = ...
    exp_old: Any = ...
    exp_new: Any = ...
    dst_new: Any = ...
    tc: Any = ...
    def arg_check0(self) -> None: ...
    def arg_check1(self, new: Any) -> None: ...
    def arg_check2(self, name: Any, new: Any) -> None: ...
    def arg_check3(self, object: Any, name: Any, new: Any) -> None: ...
    def arg_check4(self, object: Any, name: Any, old: Any, new: Any) -> None: ...

class PropertyDependsOn(HasTraits):
    sum: Any = ...
    ref: Any = ...
    pcalls: Any = ...
    calls: Any = ...
    exp_old: Any = ...
    exp_new: Any = ...
    tc: Any = ...

class OnTraitChangeTest(unittest.TestCase):
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
    def test_arg_check_simple(self) -> None: ...
    def test_arg_check_decorator(self) -> None: ...
    def test_instance_simple_value(self) -> None: ...
    def test_instance_list_value(self) -> None: ...
    def test_instance_dict_value(self) -> None: ...
    def test_instance_value_list_listener(self) -> None: ...
    def test_list1(self) -> None: ...
    def test_list2(self) -> None: ...
    def test_list3(self) -> None: ...
    def test_dict1(self) -> None: ...
    def test_dict2(self) -> None: ...
    def test_dict3(self) -> None: ...
    def test_pattern_list1(self) -> None: ...
    def test_pattern_list2(self) -> None: ...
    def test_pattern_list3(self) -> None: ...
    def test_pattern_list4(self) -> None: ...
    def test_pattern_list5(self) -> None: ...
    def test_pattern_list6(self) -> None: ...
    def test_pattern_list7(self) -> None: ...
    def test_pattern_list8(self) -> None: ...
    def test_pattern_list9(self) -> None: ...
    def test_pattern_list10(self) -> None: ...
    def test_pattern_list11(self) -> None: ...
    def test_pattern_list12(self) -> None: ...
    def test_pattern_list13(self) -> None: ...
    def test_cycle1(self) -> None: ...
    def test_cycle2(self) -> None: ...
    def test_cycle3(self) -> None: ...
    def test_property(self) -> None: ...
    def check_list(self, l: Any) -> None: ...
    def check_dict(self, d: Any) -> None: ...
    def check_complex(self, c: Any, r: Any, pattern: Any, names: Any, other: Any = ...) -> None: ...
    def multi_register(self, object: Any, handlers: Any, pattern: Any, remove: bool = ...) -> None: ...
    def build_list(self): ...
    def new_link(self, lt: Any, cur: Any, value: Any): ...
