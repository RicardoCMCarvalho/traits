import unittest
from traits.api import CList as CList, HasTraits as HasTraits, Instance as Instance, Int as Int, List as List, Str as Str, TraitError as TraitError
from typing import Any

class Foo(HasTraits):
    l: Any = ...

class Bar(HasTraits):
    name: Any = ...

class Baz(HasTraits):
    bars: Any = ...

class BazRef(HasTraits):
    bars: Any = ...

class DeepBaz(HasTraits):
    baz: Any = ...

class DeepBazBazRef(HasTraits):
    baz: Any = ...

class CFoo(HasTraits):
    ints: Any = ...
    strs: Any = ...

class ListTestCase(unittest.TestCase):
    def test_initialized(self) -> None: ...
    def test_initializer(self) -> None: ...
    def test_type_check(self) -> None: ...
    def test_append(self) -> None: ...
    def test_remove(self) -> None: ...
    def test_slice(self) -> None: ...
    def test_slice_assignment(self) -> None: ...
    def test_slice_assignments_of_different_length(self) -> None: ...
    def test_slice_deletion_bad_length_computation(self) -> None: ...
    def test_retrieve_reference(self) -> None: ...
    def test_assignment_makes_copy(self) -> None: ...
    def test_should_not_allow_none(self) -> None: ...
    def test_clone(self) -> None: ...
    def test_clone_ref(self) -> None: ...
    def test_clone_deep_baz(self) -> None: ...
    def test_clone_deep_baz_ref(self) -> None: ...
    def test_coercion(self) -> None: ...
    def test_extend(self) -> None: ...
    def test_iadd(self) -> None: ...
    def test_imul(self) -> None: ...
    def test_sort_no_args(self) -> None: ...
    def test_sort_key(self): ...
    def test_sort_reverse(self) -> None: ...
    def test_sort_key_reverse(self): ...
    def test_sort_cmp_error(self): ...
    def test_copy(self) -> None: ...
    def test_copy_returns_list(self) -> None: ...
    def test_clear(self) -> None: ...
    def test_clear_with_min_length(self) -> None: ...
