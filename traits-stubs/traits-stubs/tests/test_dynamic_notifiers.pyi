import unittest
from traits import trait_notifiers as trait_notifiers
from traits.api import Event as Event, Float as Float, HasTraits as HasTraits, List as List, on_trait_change as on_trait_change
from typing import Any

class DynamicNotifiers(HasTraits):
    ok: Any = ...
    fail: Any = ...
    priority_test: Any = ...
    rebind_calls_0: Any = ...
    rebind_calls_1: Any = ...
    rebind_calls_2: Any = ...
    rebind_calls_3: Any = ...
    rebind_calls_4: Any = ...
    exceptions_from: Any = ...
    prioritized_notifications: Any = ...
    def method_listener_0(self) -> None: ...
    def method_listener_1(self, new: Any) -> None: ...
    def method_listener_2(self, name: Any, new: Any) -> None: ...
    def method_listener_3(self, obj: Any, name: Any, new: Any) -> None: ...
    def method_listener_4(self, obj: Any, name: Any, old: Any, new: Any) -> None: ...
    def failing_method_listener_0(self) -> None: ...
    def failing_method_listener_1(self, new: Any) -> None: ...
    def failing_method_listener_2(self, name: Any, new: Any) -> None: ...
    def failing_method_listener_3(self, obj: Any, name: Any, new: Any) -> None: ...
    def failing_method_listener_4(self, obj: Any, name: Any, old: Any, new: Any) -> None: ...
    def low_priority_first(self) -> None: ...
    def high_priority_first(self) -> None: ...
    def low_priority_second(self) -> None: ...
    def high_priority_second(self) -> None: ...

class UnhashableDynamicNotifiers(DynamicNotifiers):
    a_list: Any = ...
    def __hash__(self) -> Any: ...
    def __eq__(self) -> Any: ...

class TestDynamicNotifiers(unittest.TestCase):
    exceptions: Any = ...
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
    def test_dynamic_notifiers_methods(self) -> None: ...
    def test_dynamic_notifiers_methods_failing(self) -> None: ...
    def test_dynamic_notifiers_functions(self) -> None: ...
    def test_priority_notifiers_first(self) -> None: ...
    def test_dynamic_notifiers_functions_failing(self) -> None: ...
    def test_object_can_be_garbage_collected(self) -> None: ...
    def test_unhashable_object_can_be_garbage_collected(self) -> None: ...
    def test_creating_notifiers_dont_create_cyclic_garbage(self) -> None: ...
