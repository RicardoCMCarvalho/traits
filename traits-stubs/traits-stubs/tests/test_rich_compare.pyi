import unittest
from traits.api import Any as Any, ComparisonMode as ComparisonMode, HasTraits as HasTraits, Str as Str

class IdentityCompare(HasTraits):
    bar: Any = ...

class RichCompare(HasTraits):
    bar: Any = ...

class RichCompareTests:
    changed_object: Any = ...
    changed_trait: Any = ...
    changed_old: Any = ...
    changed_new: Any = ...
    def bar_changed(self, object: Any, trait: Any, old: Any, new: Any) -> None: ...
    changed_count: int = ...
    def reset_change_tracker(self) -> None: ...
    def check_tracker(self, object: Any, trait: Any, old: Any, new: Any, count: Any) -> None: ...
    def test_id_first_assignment(self) -> None: ...
    def test_rich_first_assignment(self) -> None: ...
    def test_id_same_object(self) -> None: ...
    def test_rich_same_object(self) -> None: ...
    def test_id_different_object(self) -> None: ...
    def test_rich_different_object(self) -> None: ...
    def test_id_different_object_same_as(self) -> None: ...
    def test_rich_different_object_same_as(self) -> None: ...

class Foo(HasTraits):
    name: Any = ...
    def __ne__(self, other: Any) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...

class RichCompareHasTraitsTestCase(unittest.TestCase, RichCompareTests):
    a: Any = ...
    same_as_a: Any = ...
    different_from_a: Any = ...
    def setUp(self) -> None: ...
    def test_assumptions(self) -> None: ...

class OldRichCompareTestCase(unittest.TestCase):
    def test_rich_compare_false(self): ...
    def test_rich_compare_true(self): ...
