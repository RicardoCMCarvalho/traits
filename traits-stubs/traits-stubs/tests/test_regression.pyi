import unittest
from traits.has_traits import HasStrictTraits as HasStrictTraits, HasTraits as HasTraits, Property as Property, on_trait_change as on_trait_change
from traits.testing.optional_dependencies import numpy as numpy, requires_numpy as requires_numpy
from traits.trait_errors import TraitError as TraitError
from traits.trait_numeric import Array as Array
from traits.trait_type import TraitType as TraitType
from traits.trait_types import Bool as Bool, DelegatesTo as DelegatesTo, Either as Either, Instance as Instance, Int as Int, List as List
from typing import Any

class Dummy(HasTraits):
    x: Any = ...

class Dummy2(HasTraits):
    y: Any = ...
    dummy: Any = ...

class DelegateMess(HasTraits):
    dummy1: Any = ...
    dummy2: Any = ...
    y: Any = ...
    handler_called: Any = ...

class DelegateLeak(HasTraits):
    visible: Any = ...
    can_enable: Any = ...
    flag: Any = ...

class Presenter(HasTraits):
    obj: Any = ...
    y: Any = ...

class ListUpdatesTest(HasTraits):
    a: Any = ...
    b: Any = ...
    events_received: Any = ...

class SimpleProperty(HasTraits):
    x: Any = ...
    y: Any = ...

class ExtendedListenerInList(HasTraits):
    dummy: Any = ...
    changed: Any = ...
    def set_changed(self) -> None: ...

class RaisingValidator(TraitType):
    info_text: str = ...
    default_value: Any = ...
    def validate(self, object: Any, name: Any, value: Any) -> None: ...

class TestRegression(unittest.TestCase):
    def test_default_value_for_no_cache(self) -> None: ...
    def test_default_value_for_property(self) -> None: ...
    def test_subclasses_weakref(self) -> None: ...
    def test_leaked_property_tuple(self) -> None: ...
    def test_delegate_initializer(self) -> None: ...
    def test_no_leaking_notifiers(self) -> None: ...
    def test_init_list_depends(self) -> None: ...
    def test_has_traits_notifiers_refleak(self) -> None: ...
    def test_delegation_refleak(self) -> None: ...
    def test_exception_from_numpy_comparison_ignored(self) -> None: ...
    def test_on_trait_change_with_list_of_extended_names(self) -> None: ...
    def test_set_disallowed_exception(self) -> None: ...
    def test_validate_exception_propagates(self) -> None: ...
