import unittest
from traits.adaptation.api import reset_global_adaptation_manager as reset_global_adaptation_manager
from traits.api import Adapter as Adapter, AdaptsTo as AdaptsTo, HasTraits as HasTraits, Instance as Instance, Int as Int, Interface as Interface, List as List, Supports as Supports, TraitError as TraitError, provides as provides, register_factory as register_factory
from typing import Any

class IFoo(Interface):
    def get_foo(self) -> None: ...

class IFooPlus(IFoo):
    def get_foo_plus(self) -> None: ...

class IAverage(Interface):
    def get_average(self) -> None: ...

class IList(Interface):
    def get_list(self) -> None: ...

class Sample(HasTraits):
    s1: Any = ...
    s2: Any = ...
    s3: Any = ...
    i1: Any = ...
    i2: Any = ...
    i3: Any = ...

class SampleList(HasTraits):
    data: Any = ...
    def get_list(self): ...

class SampleAverage(HasTraits):
    data: Any = ...
    def get_list(self): ...
    def get_average(self): ...

class UndeclaredAverageProvider(HasTraits):
    def get_average(self): ...

class SampleBad(HasTraits): ...

class TraitsHolder(HasTraits):
    a_no: Any = ...
    a_yes: Any = ...
    a_default: Any = ...
    list_adapted_to: Any = ...
    foo_adapted_to: Any = ...
    foo_plus_adapted_to: Any = ...
    list_adapts_to: Any = ...
    foo_adapts_to: Any = ...
    foo_plus_adapts_to: Any = ...

class SampleListAdapter(Adapter):
    def get_list(self): ...

class ListAverageAdapter(Adapter):
    def get_average(self): ...

class SampleFooAdapter(HasTraits):
    object: Any = ...
    def __init__(self, object: Any) -> None: ...
    def get_foo(self): ...

class FooPlusAdapter:
    obj: Any = ...
    def __init__(self, obj: Any) -> None: ...
    def get_foo(self): ...
    def get_foo_plus(self): ...

class InterfacesTest(unittest.TestCase):
    def setUp(self) -> None: ...
    def test_provides_none(self) -> None: ...
    def test_provides_one(self) -> None: ...
    def test_provides_multi(self) -> None: ...
    def test_provides_extended(self) -> None: ...
    def test_provides_bad(self) -> None: ...
    def test_instance_adapt_no(self) -> None: ...
    def test_instance_adapt_yes(self) -> None: ...
    def test_instance_adapt_default(self) -> None: ...
    def test_adapted_to(self) -> None: ...
    def test_adapts_to(self) -> None: ...
    def test_decorated_class_name_and_docstring(self) -> None: ...
    def test_instance_requires_provides(self) -> None: ...
