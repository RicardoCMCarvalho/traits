import unittest
from traits.api import HasTraits as HasTraits, Int as Int, List as List
from typing import Any

class MyClass(HasTraits):
    l: Any = ...
    l_events: Any = ...

class ListEventTestCase(unittest.TestCase):
    def test_initialization(self) -> None: ...
    def test_append(self) -> None: ...
    def test_extend(self) -> None: ...
    def test_extend_via_inplace_addition(self) -> None: ...
    def test_insert(self) -> None: ...
    def test_insert_with_negative_argument(self) -> None: ...
    def test_insert_index_invariants(self) -> None: ...
    def test_pop_with_no_argument(self) -> None: ...
    def test_pop(self) -> None: ...
    def test_pop_with_negative_argument(self) -> None: ...
    def test_pop_out_of_range(self) -> None: ...
    def test_remove(self) -> None: ...
    def test_remove_item_not_present(self) -> None: ...
    def test_inplace_multiply(self) -> None: ...
    def test_inplace_multiply_by_zero(self) -> None: ...
    def test_remove_empty_slices(self) -> None: ...
    def test_remove_empty_slices_steps(self) -> None: ...
    def test_clear(self) -> None: ...
    def test_clear_empty_list(self) -> None: ...
    def test_delete_step_slice(self) -> None: ...
    def test_delete_step_slice_empty_list(self) -> None: ...
    def test_assignment_step_slice(self) -> None: ...
