from ..api import Any as Any, DelegatesTo as DelegatesTo, HasTraits as HasTraits, Int as Int, Range as Range

n: int
t0: Any

def measure(func: Any): ...

class old_style_value:
    def measure(self, reference_get: float = ..., reference_set: float = ...): ...
    def null(self) -> None: ...
    value: int = ...
    def init(self) -> None: ...
    def do_set(self) -> None: ...
    def do_get(self) -> None: ...

class new_style_value:
    def measure(self): ...
    def null(self) -> None: ...
    value: int = ...
    def init(self) -> None: ...
    def do_set(self) -> None: ...
    def do_get(self) -> None: ...

class property_value(new_style_value):
    def get_value(self): ...
    def set_value(self, value: Any) -> None: ...
    value: Any = ...

class global_value(new_style_value):
    def init(self) -> None: ...
    def do_set(self) -> None: ...
    def do_get(self) -> None: ...

class any_value(HasTraits, new_style_value):
    value: Any = ...

class int_value(any_value):
    value: Any = ...

class range_value(any_value):
    value: Any = ...

class change_value(int_value): ...

class monitor_value(int_value):
    def init(self) -> None: ...
    def on_value_change(self, object: Any, trait_name: Any, old: Any, new: Any) -> None: ...

class delegate_value(HasTraits, new_style_value):
    value: Any = ...
    delegate: Any = ...
    def init(self) -> None: ...

class delegate_2_value(delegate_value):
    delegate: Any = ...
    def init(self) -> None: ...

class delegate_3_value(delegate_value):
    delegate: Any = ...
    def init(self) -> None: ...

def report(name: Any, get_time: Any, set_time: Any, ref_get_time: Any, ref_set_time: Any): ...
def run_benchmark(klass: Any, ref_get_time: Any, ref_set_time: Any) -> None: ...
def main() -> None: ...
