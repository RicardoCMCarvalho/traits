import unittest
from traits.api import Any as Any, HasTraits as HasTraits, Instance as Instance, Property as Property, Str as Str

class Foo(HasTraits):
    s: Any = ...

class ClassWithAny(HasTraits):
    x: Any = ...

class ClassWithInstance(HasTraits):
    x: Any = ...

class ClassWithClassAttribute(HasTraits):
    name: str = ...
    foo: Any = ...

class BazAny(HasTraits):
    other: Any = ...

class BarAny(HasTraits):
    other: Any = ...

class BazInstance(HasTraits):
    other: Any = ...
    unique: Any = ...
    shared: Any = ...
    ref: Any = ...

class BarInstance(HasTraits):
    other: Any = ...
    unique: Any = ...
    shared: Any = ...
    ref: Any = ...

class CloneTestCase(unittest.TestCase):
    def test_any(self) -> None: ...
    def test_instance(self) -> None: ...
    def test_class_attribute_missing(self) -> None: ...
    def test_Any_circular_references(self) -> None: ...
    def test_Any_circular_references_deep(self) -> None: ...
    def test_Instance_circular_references(self) -> None: ...
    def test_Instance_circular_references_deep(self) -> None: ...
