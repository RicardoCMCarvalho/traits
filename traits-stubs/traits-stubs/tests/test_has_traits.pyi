import unittest
from traits.ctrait import CTrait as CTrait
from traits.has_traits import BaseTraits as BaseTraits, ClassTraits as ClassTraits, HasTraits as HasTraits, InstanceTraits as InstanceTraits, ListenerTraits as ListenerTraits, PrefixTraits as PrefixTraits, on_trait_change as on_trait_change, update_traits_class_dict as update_traits_class_dict
from traits.trait_types import Event as Event, Float as Float, Instance as Instance, Int as Int
from traits.traits import ForwardProperty as ForwardProperty, generic_trait as generic_trait

class TestCreateTraitsMetaDict(unittest.TestCase):
    def test_class_attributes(self) -> None: ...
    def test_forward_property(self) -> None: ...
    def test_standard_trait(self) -> None: ...
    def test_prefix_trait(self) -> None: ...
    def test_listener_trait(self) -> None: ...
    def test_python_property(self) -> None: ...
    def test_complex_baseclass(self) -> None: ...

class TestHasTraits(unittest.TestCase):
    def test__class_traits(self) -> None: ...
    def test__instance_traits(self) -> None: ...
    def test__trait_notifications_enabled(self) -> None: ...
    def test__trait_notifications_vetoed(self) -> None: ...
