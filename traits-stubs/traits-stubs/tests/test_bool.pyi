import unittest
from traits.api import Bool as Bool, Dict as Dict, HasTraits as HasTraits, Int as Int, TraitError as TraitError
from traits.testing.optional_dependencies import numpy as numpy, requires_numpy as requires_numpy
from typing import Any

class A(HasTraits):
    foo: Any = ...

class TestBool(unittest.TestCase):
    def test_default_value(self) -> None: ...
    def test_accepts_bool(self) -> None: ...
    def test_does_not_accept_int_or_float(self) -> None: ...
    def test_accepts_numpy_bool(self) -> None: ...
    def test_numpy_bool_retrieved_as_bool(self) -> None: ...
    def test_numpy_bool_accepted_as_dict_value(self) -> None: ...
    def test_numpy_bool_accepted_as_dict_key(self) -> None: ...
