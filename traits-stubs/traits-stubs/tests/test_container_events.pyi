import unittest
from traits.api import Dict as Dict, HasTraits as HasTraits
from typing import Any

class MyClass(HasTraits):
    d: Any = ...
    callback: Any = ...
    def __init__(self, callback: Any) -> None: ...

class MyOtherClass(HasTraits):
    d: Any = ...

class Callback:
    obj: Any = ...
    added: Any = ...
    changed: Any = ...
    removed: Any = ...
    called: bool = ...
    def __init__(self, obj: Any, added: Any = ..., changed: Any = ..., removed: Any = ...) -> None: ...
    def __call__(self, event: Any) -> None: ...

class DictEventTestCase(unittest.TestCase):
    def test_setitem(self) -> None: ...
    def test_delitem(self) -> None: ...
    def test_clear(self) -> None: ...
    def test_update(self) -> None: ...
    def test_setdefault(self) -> None: ...
    def test_pop(self) -> None: ...
    def test_popitem(self) -> None: ...
    def test_dynamic_listener(self) -> None: ...
