import unittest
from traits.api import BaseCallable as BaseCallable, Callable as Callable, Either as Either, HasTraits as HasTraits, Str as Str, TraitError as TraitError
from typing import Any

def function() -> None: ...

class Dummy:
    def instance_method(self) -> None: ...

class MyCallable(HasTraits):
    value: Any = ...
    callable_or_str: Any = ...

class MyBaseCallable(HasTraits):
    value: Any = ...

class TestCallable(unittest.TestCase):
    def test_default(self) -> None: ...
    def test_accepts_lambda(self): ...
    def test_accepts_type(self) -> None: ...
    def test_accepts_method(self) -> None: ...
    def test_accepts_function(self) -> None: ...
    def test_rejects_int(self) -> None: ...
    def test_callable_in_complex_trait(self) -> None: ...

class TestBaseCallable(unittest.TestCase):
    def test_override_validate(self): ...
    def test_accepts_function(self): ...
    def test_accepts_method(self) -> None: ...
    def test_accepts_type(self) -> None: ...
    def test_accepts_none(self) -> None: ...
    def test_rejects_non_callable(self) -> None: ...
