import unittest
from traits.has_traits import HasTraits as HasTraits, on_trait_change as on_trait_change
from traits.trait_types import Dict as Dict, Instance as Instance, Int as Int, List as List, Set as Set, Str as Str
from typing import Any

class A(HasTraits):
    alist: Any = ...
    adict: Any = ...
    aset: Any = ...
    events: Any = ...

class B(HasTraits):
    dict: Any = ...

class TestTraitListDictSetPersistence(unittest.TestCase):
    def test_trait_list_object_persists(self) -> None: ...
    def test_trait_dict_object_persists(self) -> None: ...
    def test_trait_set_object_persists(self) -> None: ...
    def test_trait_list_object_copies(self) -> None: ...
    def test_trait_dict_object_copies(self) -> None: ...
    def test_trait_set_object_copies(self) -> None: ...
    def test_pickle_whole(self) -> None: ...
    def test_trait_set_object_operations(self) -> None: ...
    def test_trait_set_object_inplace(self) -> None: ...
    def test_trait_list_default_kind(self) -> None: ...
    def test_trait_dict_default_kind(self) -> None: ...
    def test_trait_set_default_kind(self) -> None: ...
    def test_trait_list_default(self) -> None: ...
    def test_trait_dict_default(self) -> None: ...
    def test_trait_set_default(self) -> None: ...
