import abc
import unittest
from traits.api import ABCHasTraits as ABCHasTraits, ABCMetaHasTraits as ABCMetaHasTraits, Float as Float, HasTraits as HasTraits, Int as Int
from typing import Any

class TestNew(unittest.TestCase):
    old_filters: Any = ...
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
    def test_new(self) -> None: ...

class AbstractFoo(ABCHasTraits, metaclass=abc.ABCMeta):
    x: Any = ...
    y: Any = ...
    @abc.abstractmethod
    def foo(self) -> Any: ...
    @property
    @abc.abstractmethod
    def bar(self) -> Any: ...

class ConcreteFoo(AbstractFoo):
    def foo(self): ...
    @property
    def bar(self): ...

class FooLike(HasTraits):
    x: Any = ...
    y: Any = ...
    def foo(self): ...
    @property
    def bar(self): ...

class AbstractBar(abc.ABC, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def bar(self) -> Any: ...

class TestABC(unittest.TestCase):
    def test_basic_abc(self) -> None: ...
    def test_registered(self) -> None: ...
    def test_post_hoc_mixing(self): ...
