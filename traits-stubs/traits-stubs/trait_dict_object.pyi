from .trait_base import Undefined as Undefined
from .trait_errors import TraitError as TraitError
from typing import Any, Optional

logger: Any

class TraitDictEvent:
    added: Any = ...
    changed: Any = ...
    removed: Any = ...
    def __init__(self, added: Optional[Any] = ..., changed: Optional[Any] = ..., removed: Optional[Any] = ...) -> None: ...

class TraitDictObject(dict):
    trait: Any = ...
    object: Any = ...
    name: Any = ...
    name_items: Any = ...
    def __init__(self, trait: Any, object: Any, name: Any, value: Any) -> None: ...
    def __deepcopy__(self, memo: Any): ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def clear(self) -> None: ...
    def update(self, dic: Any) -> None: ...
    def setdefault(self, key: Any, value: Optional[Any] = ...): ...
    def pop(self, key: Any, value: Any = ...): ...
    def popitem(self): ...
    def rename(self, name: Any) -> None: ...
