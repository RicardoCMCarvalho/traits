from traits.api import Any as Any, Event as Event, HasStrictTraits as HasStrictTraits, Instance as Instance, Int as Int, List as List, Property as Property, Str as Str
from traits.util.async_trait_wait import wait_for_condition as wait_for_condition
from typing import Optional

class _AssertTraitChangesContext:
    obj: Any = ...
    xname: Any = ...
    count: Any = ...
    event: Any = ...
    events: Any = ...
    failureException: Any = ...
    def __init__(self, obj: Any, xname: Any, count: Any, test_case: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, tb: Any): ...

def reverse_assertion(context: Any, msg: Any) -> None: ...

class _TraitsChangeCollector(HasStrictTraits):
    obj: Any = ...
    trait_name: Any = ...
    event_count: Any = ...
    event_count_updated: Any = ...
    events: Any = ...
    def __init__(self, **traits: Any) -> None: ...
    def start_collecting(self) -> None: ...
    def stop_collecting(self) -> None: ...

class UnittestTools:
    def assertTraitChanges(self, obj: Any, trait: Any, count: Optional[Any] = ..., callableObj: Optional[Any] = ..., *args: Any, **kwargs: Any): ...
    def assertTraitDoesNotChange(self, obj: Any, trait: Any, callableObj: Optional[Any] = ..., *args: Any, **kwargs: Any): ...
    def assertMultiTraitChanges(self, objects: Any, traits_modified: Any, traits_not_modified: Any) -> None: ...
    def assertTraitChangesAsync(self, obj: Any, trait: Any, count: int = ..., timeout: float = ...): ...
    def assertEventuallyTrue(self, obj: Any, trait: Any, condition: Any, timeout: float = ...) -> None: ...
    def assertDeprecated(self) -> None: ...
    def assertNotDeprecated(self) -> None: ...
