from .trait_base import Undefined as Undefined, class_of as class_of
from .trait_errors import TraitError as TraitError
from typing import Any, Optional

class TraitListEvent:
    index: Any = ...
    removed: Any = ...
    added: Any = ...
    def __init__(self, index: int = ..., removed: Optional[Any] = ..., added: Optional[Any] = ...) -> None: ...

class TraitListObject(list):
    trait: Any = ...
    object: Any = ...
    name: Any = ...
    name_items: Any = ...
    def __init__(self, trait: Any, object: Any, name: Any, value: Any) -> None: ...
    def __deepcopy__(self, memo: Any): ...
    def __setitem__(self, key: Any, value: Any): ...
    def __delitem__(self, key: Any): ...
    def __iadd__(self, other: Any): ...
    def __imul__(self, count: Any): ...
    def append(self, value: Any) -> None: ...
    def insert(self, index: Any, value: Any): ...
    def extend(self, xlist: Any) -> None: ...
    def remove(self, value: Any) -> None: ...
    def sort(self, key: Optional[Any] = ..., reverse: bool = ...) -> None: ...
    def reverse(self) -> None: ...
    def pop(self, *args: Any): ...
    def rename(self, name: Any) -> None: ...
    def clear(self) -> None: ...
    def len_error(self, len: Any) -> None: ...
