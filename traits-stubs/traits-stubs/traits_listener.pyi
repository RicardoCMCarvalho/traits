from .constants import DefaultValue as DefaultValue
from .has_traits import HasPrivateTraits as HasPrivateTraits
from .trait_base import Undefined as Undefined, Uninitialized as Uninitialized
from .trait_errors import TraitError as TraitError
from .trait_notifiers import TraitChangeNotifyWrapper as TraitChangeNotifyWrapper
from .trait_types import Any as Any, Bool as Bool, Enum as Enum, Instance as Instance, Int as Int, List as List, Str as Str
from .traits import Property as Property
from .util.weakiddict import WeakIDKeyDict as WeakIDKeyDict
from typing import Optional

TraitsListener: str
EOS: str
ANYTRAIT_LISTENER: str
SIMPLE_LISTENER: str
LIST_LISTENER: str
DICT_LISTENER: str
SET_LISTENER: str
type_map: Any
ANY_LISTENER: int
SRC_LISTENER: int
DST_LISTENER: int
ListenerType: Any
INVALID_DESTINATION: Any
simple_pat: Any
name_pat: Any
name_chars: Any

def indent(text: Any, first_line: bool = ..., n: int = ..., width: int = ...): ...
def is_not_none(value: Any): ...
def is_none(value: Any): ...
def not_event(value: Any): ...

class ListenerBase(HasPrivateTraits):
    def register(self, new: Any) -> None: ...
    def unregister(self, old: Any) -> None: ...
    def handle(self, object: Any, name: Any, old: Any, new: Any) -> None: ...
    def handle_list(self, object: Any, name: Any, old: Any, new: Any) -> None: ...
    def handle_list_items(self, object: Any, name: Any, old: Any, new: Any) -> None: ...
    def handle_dict(self, object: Any, name: Any, old: Any, new: Any) -> None: ...
    def handle_dict_items(self, object: Any, name: Any, old: Any, new: Any) -> None: ...

class ListenerItem(ListenerBase):
    name: Any = ...
    metadata_name: Any = ...
    metadata_defined: Any = ...
    handler: Any = ...
    wrapped_handler_ref: Any = ...
    dispatch: Any = ...
    priority: Any = ...
    next: Any = ...
    type: Any = ...
    notify: Any = ...
    deferred: Any = ...
    is_any_trait: Any = ...
    is_list_handler: Any = ...
    active: Any = ...
    def register(self, new: Any): ...
    def unregister(self, old: Any) -> None: ...
    def handle_simple(self, object: Any, name: Any, old: Any, new: Any) -> None: ...
    def handle_dst(self, object: Any, name: Any, old: Any, new: Any) -> None: ...
    def handle_list(self, object: Any, name: Any, old: Any, new: Any) -> None: ...
    def handle_list_items(self, object: Any, name: Any, old: Any, new: Any) -> None: ...
    def handle_list_items_special(self, object: Any, name: Any, old: Any, new: Any) -> None: ...
    def handle_dict(self, object: Any, name: Any, old: Any, new: Any) -> None: ...
    def handle_dict_items(self, object: Any, name: Any, old: Any, new: Any) -> None: ...
    def handle_error(self, obj: Any, name: Any, old: Any, new: Any) -> None: ...

ListProperty: Any

class ListenerGroup(ListenerBase):
    handler: Any = ...
    wrapped_handler_ref: Any = ...
    dispatch: Any = ...
    priority: Any = ...
    next: Any = ...
    type: Any = ...
    notify: Any = ...
    deferred: Any = ...
    items: Any = ...
    def register(self, new: Any): ...
    def unregister(self, old: Any) -> None: ...

class ListenerParser(HasPrivateTraits):
    text: Any = ...
    len_text: Any = ...
    index: Any = ...
    next: Any = ...
    name: Any = ...
    skip_ws: Any = ...
    backspace: Any = ...
    listener: Any = ...
    def __init__(self, text: str = ..., **traits: Any) -> None: ...
    def parse(self): ...
    def parse_group(self, terminator: str = ...): ...
    def parse_item(self, terminator: Any): ...
    def parse_metadata(self, item: Any) -> None: ...
    def error(self, msg: Any) -> None: ...

class ListenerNotifyWrapper(TraitChangeNotifyWrapper):
    type: Any = ...
    id: Any = ...
    listener: Any = ...
    def __init__(self, handler: Any, owner: Any, id: Any, listener: Any, target: Optional[Any] = ...) -> None: ...
    object: Any = ...
    def listener_deleted(self, ref: Any) -> None: ...
    def owner_deleted(self, ref: Any) -> None: ...

class ListenerHandler:
    object: Any = ...
    name: Any = ...
    handler: Any = ...
    def __init__(self, handler: Any) -> None: ...
    def __call__(self): ...
    def listener_deleted(self, ref: Any) -> None: ...
